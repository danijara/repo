# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1X6KBqFSxvcp8EfTzY7t4DI-hQHOpJgzR
"""

import streamlit as st
import pandas as pd
import io
import matplotlib.pyplot as plt
from mplsoccer import Radar
import io
import requests

# Reemplaza con el ID del archivo de Google Drive que deseas utilizar
GOOGLE_DRIVE_FILE_ID = '1p6t_XxbtG7YiFP8QWhw8HTVV4GZNCOxa'

def download_google_drive_file(file_id):
    url = f"https://docs.google.com/spreadsheets/d/1p6t_XxbtG7YiFP8QWhw8HTVV4GZNCOxa/edit?usp=sharing&ouid=114362841776737485141&rtpof=true&sd=true"
    response = requests.get(url)
    if response.status_code == 200:
        content_type = response.headers.get('content-type')
        if content_type == 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet':
            return io.BytesIO(response.content)
        else:
            raise ValueError(f"El archivo no es un archivo Excel válido. Tipo de contenido: {content_type}")
    else:
        raise ValueError(f"Error al descargar el archivo. Código de estado: {response.status_code}")


@st.cache
def load_data(file_id):
    file_stream = download_google_drive_file(file_id)
    data = pd.read_excel(file_stream)
    return data

data = load_data(GOOGLE_DRIVE_FILE_ID)

st.set_option('deprecation.showfileUploaderEncoding', False)

st.title("Comparación de jugadores con gráfico de radar")

@st.cache
#def load_data(uploaded_file):
#    data = pd.read_excel(uploaded_file)
#    return data

def plot_radar(data, spieler1, spieler2, params):
    if not isinstance(params, list):
        params = [params]

    min_range = [0] * len(params)
    max_range = [data[param].max() for param in params]

    radar = Radar(params=params, min_range=min_range, max_range=max_range)
    fig, ax = radar.setup_axis()
    rings_inner = radar.draw_circles(ax=ax, facecolor='#ffb2b2', edgecolor='#fc5f5f')

    minutes_threshold = data['Gespielte Minuten'].max() * 0.4
    filtered_data = data[data['Gespielte Minuten'] >= minutes_threshold]
    highest_values = [filtered_data.loc[filtered_data[param].idxmax()] for param in params]

    max_filtered_values = [player[param] for player, param in zip(highest_values, params)]
    max_filtered_labels = [player['Spieler'] for player in highest_values]

    radar_poly_max_filtered, _, vertices_max_filtered = radar.draw_radar(max_filtered_values, ax=ax,
                                                      kwargs_radar={'facecolor': 'none', 'edgecolor': 'gray', 'alpha': 0.6, 'lw': 1},
                                                      kwargs_rings={'facecolor': 'none', 'alpha': 0.6})

    colors = ['#00f2c1', '#d80499']
    labels = [spieler1, spieler2]

    for spieler, color, label in zip([spieler1, spieler2], colors, labels):
        values = data.loc[data['Spieler'] == spieler, params].values.tolist()[0]
        radar_poly, rings, vertices = radar.draw_radar(values, ax=ax,
                                                       kwargs_radar={'facecolor': color, 'alpha': 0.6}, 
                                                       kwargs_rings={'facecolor': color, 'alpha': 0.6})
        ax.plot([], [], color=color, label=label)

    ax.legend(loc='upper right', bbox_to_anchor=(1.2, 1))

    range_labels = radar.draw_range_labels(ax=ax)
    param_labels = radar.draw_param_labels(ax=ax)

    table_data = []
    for param in params:
        row = [param]
        for spieler in [spieler1, spieler2]:
            value = data.loc[data['Spieler'] == spieler, param].values[0]
            row.append(value)
        table_data.append(row)

    table = plt.table(cellText=table_data, colLabels=['Parameter', spieler1, spieler2], loc='right', bbox=[1.25, 0.1, 0.5, 0.5])

    fontsize = 24
    cell_width, cell_height = 0.3, 0.1
    for key, cell in table.get_celld().items():
        cell.set_fontsize(fontsize)
        cell.set_height(cell_height)
        if key[1] != -1:
            cell.set_width(cell_width)
            
    for idx, (label, vertex) in enumerate(zip(max_filtered_labels, vertices_max_filtered)):
        ax.annotate(f'"{label}"', vertex, fontsize=10, color='black', ha='center', va='bottom', xytext=(0, -20), textcoords='offset points')

    return fig

def main():
    uploaded_file = st.file_uploader("Carga tus datos en formato Excel", type=['xls', 'xlsx'])
    if uploaded_file is not None:
        data = load_data(uploaded_file)
        team_options = data['Team innerhalb des gewählten Zeitraumes'].unique()

        st.sidebar.title("Selecciona los jugadores")

        team1 = st.sidebar.selectbox('Equipo 1', options=team_options, index=0)
        spieler1 = st.sidebar.selectbox('Jugador 1', options=data[data['Fußballmannschaft'] == team1]['Spieler'].unique())

        team2 = st.sidebar.selectbox('Equipo 2', options=team_options, index=1)
        spieler2 = st.sidebar.selectbox('Jugador 2', options=data[data['Fußballmannschaft'] == team2]['Spieler'].unique())

        params_select = st.sidebar.multiselect('Selecciona los parámetros', options=list(data.columns))

        if st.button("Generar gráfico de radar"):
            if not params_select:
                st.error("Selecciona al menos un parámetro.")
            else:
                fig = plot_radar(data, spieler1, spieler2, params_select)
                st.pyplot(fig)

if __name__ == "__main__":
    main()
